[{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/kitty/","title":"Kitty!","tags":[],"description":"","content":"Challenge statement:\nExamine the kitty.jpeg file to find the flag. üîóhttps://drive.google.com/file/d/1XWD2aurnHEVzwcd3hub8vOW4AlbZKJDy/view?usp=sharing The kitty.jpeg looks like a very valid picture.\nSince it is the first challenge of the warmup, we can start with a simple approach.\n$ strings kitty.jpeg | grep -i nsec nsec2022{kitcam2022} Well\u0026hellip; here\u0026rsquo;s our flag! That went faster than expected. I was going to try with other words like ctf and flag, but the competition name is a great start.\nAnother way to find it was to do the same using exiftool:\n$ exiftool kitty.jpeg | grep -i nsec Camera Model Name : nsec2022{kitcam2022} "},{"uri":"https://n1trate.github.io/writeups/nsec-2022/portobello-denial/","title":"Portobello - Denial","tags":[],"description":"","content":"Challenge statement:\nAny data leaving or entering the Mycoverse goes through our AI-backed deep packet inspection appliance. The vendor told us that this box was what we needed. At this price tag, I know he‚Äôs right. Why do you need DNS logs anyway? We both know that DNS servers are just address books of Internet resources and I‚Äôve never seen anyone abuse a plain old address book. The appliance would have blocked anything malicious anyway. I bet you don‚Äôt even have a certification to understand the protocol anyway. Don‚Äôt waste your time on the network capture, I skimmed throught it and found that your test device fd00:6e73:6563:3232::beef did nothing suspicious. Rosie Meyer - A+, Server+, CCNA, CCNP, CCIE, MSDST, CSM Network Admin We need to download the pcap. This is going to be the same pcap for all Portobello challenges.\nWe can start by taking a look at what we have. In wireshark, we can use the following filter to see only what is related to the ip at hand ipv6.src == fd00:6e73:6563:3232::beef || ipv6.dst == fd00:6e73:6563:3232::beef.\nWe can see that the subdomain to lag-dns-cannot-be-abused-pinky-swear.ctf in the first query is f, then o, then r\u0026hellip; So we can keep scrolling trying to see what it could be. We end up very soon on the word flag:\nforgetspaceaboutspacesafespaceprotocolsspace flag dashd\u0026hellip;\nWe can filter on queries only, and see even better what is getting written out:\nBy reading it until we get to the next \u0026ldquo;space\u0026rdquo; word, we can get the first flag.\n flag-dns-as-covert-communication-channels\n Flag submission:\nPortobello 53 - Denial (1/2) | 1 | I hope the server can interpret covert queries (1/2) Forum message:\nI bet this is just a malformed DNS query. There‚Äôs no way a server would answer to this. The forum message was the hint for the other flag. The answer is key to understanding which subdomain is important.\nLooking at the patterns, we can see that there is a lot less successful responses than NXDOMAIN. We can filter them and get all the successful answer\u0026rsquo;s subdomains together with this:\n$ tshark -r portobello53.pcapng -Y \u0026#34;ipv6.dst == fd00:6e73:6563:3232::beef\u0026#34; | grep pinky | grep -v \u0026#34;No such\u0026#34; | awk \u0026#39;{print $13}\u0026#39; | cut -d. -f1 | tr -d \u0026#39;\\n\u0026#39; flagdashdnsdashserverhidinginternetnoise This gives us the flag:\n flag-dns-serverhidinginternetnoise\n Flag submission:\nPortobello 53 - Denial (2/2) | 1 | Ouch - A two-way covert communication channel. Watch the client proceed to the next stage of grief (2/2) Forum message:\nA server answering correctly to your arbitrary DNS queries. That‚Äôs not the kind of thing that would take the Mycoverse down. "},{"uri":"https://n1trate.github.io/writeups/nsec-2022/portobello-depression/","title":"Portobello - Depression","tags":[],"description":"","content":"Challenge statement:\nWhat do you want again? Don‚Äôt you think you‚Äôve caused enough harm to the company already? Cyber security is only an expense. You can‚Äôt profit from being secure. It is a money drain. Our AI-based deep packet inspection appliance is guaranteed to prevent theft from the Mycoverse. There is nothing left to uncover from the network traffic of the DNS server, I swear. DNS is a safe protocol when you stick to ASCII characters and our appliance only supports this encoding. Even if someone can infiltrate the Mycoverse, there is no way that they can get our intelectual property out of the network. üö© This is making me think ü§î Are the DNS queries made by our users only in ASCII? Rosie Meyer - A+, Server+, CCNA, CCNP, CCIE, MSDST, CSM Network Admin We still need to download the same pcap.\nThrough the pcap, we can see some interesting queries being made that start with xn\u0026ndash;. This type of encoding is named punycode and allows us to use unicode in places where you usually can\u0026rsquo;t.\nWe can use an online converter to get the unicode character out of them.\nTo get a better look, we can filter only for the IP making those queries, fd00:6e73:6563:3232::9 and only for DNS queries of type CNAME.\nDoing the first few by hand, we get to the fifth one and find something that could look like the start of a flag.\nWe now had to figure out which country each flag was, and replace the flags with the county\u0026rsquo;s code from the unicode character. An easy way that I used was to paste them in discord, and hovering with the mouse to get the emoji\u0026rsquo;s name. That way, we get most of the flag:\n FLAG-ART-SCRE??SH??-IS-??GITAL-TH??T\n We\u0026rsquo;re missing a few flags, but we can guess the rest\n FLAG-ART-SCREENSHOT-IS-DIGITAL-THEFT\n Flag submission:\nPortobello 53 - Depression (1/3) | 2 | The Mycoverse needs it‚Äôs own flag (1/3) Forum message:\nThe user found a way to exfiltrate informations using country flags? Where can I get a certification for this? After that, I kept going and reading the other domains. It was pretty fun and got some like that one:\nI did a dozen or two by hand, and this is what I got:\nAt that point, that last line, I knew what it was\u0026hellip; \u0026ldquo;UPLOAD START\u0026rdquo;\u0026hellip; and no, I didn\u0026rsquo;t want to keep doing it by hand. There was a total of 1223 packets that were containing a punycode CNAME\u0026hellip;.\nTime to bring out bash once again:\ntshark -r portobello53.pcapng | grep libera | grep \u0026#34;query 0x\u0026#34; | awk {\u0026#39;print $12\u0026#39;} Sending them all in a file, we can use this Punycode Converter to do more than one at a time. Loading the file with \u0026ldquo;Import Urls\u0026rdquo; and selecting \u0026ldquo;Punycode to IDN\u0026rdquo;. Scrolling down, we can start to see some form that are letters. Here\u0026rsquo;s the first one:\nBy zooming the way down to 25% we can get a better view.\nBy the way, the mushroom at the start are now very nice looking!# We can keep reading the flag, as such:\nWe then end up with:\n FLAG-ART-MUSHROOM-ARE-HIDDEN-IN-PLAIN-SIGHT\n Flag submission:\nPortobello 53 - Depression (2/3) | 1 | Is a VFT screenshot actually art theft? (2/3) Forum message:\nUsers are stealing artwork and VFTs from the Mycoverse. I need to tell the cyberpolice. At the absolute end, we get those:\nThat last command is SLEEP, but before that, we can see a nice QR Code. I say nice, but trying to read it using 5 to 10 tools, including my phone, were all unsuccessful.\nKnowing that the first thing the readers need to parse a QR Code is to recognize the Finder Patterns, and the Alignment Pattern. I did a quick and dirty work in Pinta to make sure those were clear enough:\nWith those modifications, my phone was able to read it and give me the last flag.\n FLAG-ART-EXFIL-METHOD-IS-TRUE-MASTERPIECE\n Flag submission:\nPortobello 53 - Depression (3/3) | 3 | Why invest in YRR when their art can be stolen that easily? Good grief. (3/3) Forum message:\nThat is another level of obfuscation that our AI-based appliance was not ready to deal with. "},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/warmup-challenge-logically/","title":"Warmup challenge, logically","tags":[],"description":"","content":"Challenge statement:\nHere is a pulseview (sigrok) logic capture of some universal asynchronous flags; at least 9600 of them per second üòâ ‚ö†Ô∏è : This challenge has a BONUS FLAG. Flag format: FLAG-{ } Once we download the file, we get a zip archive named warmup_flag_logicaly.sr. Searching for Pulseview Sigrok we end up on the sigrok project, where we can download a tool to analyze that file.\nAfter making that AppImage executable, we can open the file and see 8 digital channels and one analog.\nWe can see information on channel 1 and 2, so we\u0026rsquo;ll start by concentrating on that. After watching a few videos, reading more about the channels and decoders, and trying a few, we can add the proper protocol decoder, which is the Universal Asynchronous Receiver/Transmiter, or UART. A big hint was given in the challenge statement that should have been picked up earlier.\nWe can set the RX and the TX as D1 and D2 respectively, and changing the Baud rate to 9600 like the challenge is saying. After zooming in greatly, we can start seeing data showing up.\nOpening the Binary Decoder Output View, we can see the result of the UART decoder.\nWe can see that each block starts with 0xACFE and ends with 0x7D or 0x7DF0. 0x7D is the closing curly bracket \u0026ldquo;}\u0026rdquo;. We can right click on the \u0026ldquo;UART: RX data\u0026rdquo; line in our graph to export all annotations for this row.\nNow, with a bit of bash-fu, we can line them up.\nwhile read -r line; do echo $line | xxd -r -p; echo; done \u0026lt; \u0026lt;(grep -v bit rx_annotations | awk \u0026#39;{print $5}\u0026#39; | sed \u0026#39;:a;N;$!ba;s/\\n//g\u0026#39; | sed \u0026#39;s/F0ACFE/\\n/g;s/ACFE/\\n/g\u0026#39;) nsechype!\nSo we can see that all the lines are saying the same thing. The text almost fit the flag format, with the normal four letter prefix, curly bracket and content, but the letters at the front are wrong. It could be multiple thing, but with such a short text, and no more hints, we need to test if it is a Caasar Cypher. We can try it on the dcode.fr site and brute force all 26 possibilities. From the result, we can see that it was a very specific substitution cypher: rot13.\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022/portobello-bargaining/","title":"Portobello - Bargaining","tags":[],"description":"","content":"Challenge statement:\nWhile you were wasting your time on the DNS server trafic, I had Dr Harold Moon, our resident data scientist, verify if he could find anything out of the ordinary. He‚Äôs not an expert and has no active certifications under his name but he wanted you to know that the host at address fd00:6e73:6563:3232::23 was the only one presenting anomalies. I am not a data scientist and have no idea what anomalies are. It‚Äôs probably benign because the AI-backed deep packet inspection appliance did not flag anything. Dr Moon said he observed a lot of unusual ‚Äúback and forth‚Äù with this address. No appliance alert = not suspicious in my book. Rosie Meyer - A+, Server+, CCNA, CCNP, CCIE, MSDST, CSM Network Admin We still need to download the same pcap.\nWe can start by filtering the same way we did in Denial, but with the right IP address (fd00:6e73:6563:3232::23).\nWe can see some interesting calls make, like packet 1053, where the query has the word \u0026ldquo;echo\u0026rdquo; in it. The subdomain to echo also look like a string we should be able to convert.\n0.7666742d7365637572652d7661756c742e7972722e636f7270.echo.474f415453.wpad.ctf The second section 7666742d7365637572652d7661756c742e7972722e636f7270 can be translated to vft-secure-vault.yrr.corp and the fourth one 474f415453 to GOATS. That one appears in every interesting request.\nWe can keep going by hand and finding other packets, like 1522, where the second value translate to rosie.meyer, but we should do it with some kind of script, else it will take a long time.\ntshark -r portobello53.pcapng | grep wpad.ctf | grep \u0026#34;query 0x\u0026#34; | awk {\u0026#39;print $12\u0026#39;} | grep echo | cut -d. -f2 | xxd -r -p We can find out first flag in the middle, right after the wallet\u0026rsquo;s private key.\n flag-blockchaiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiin\n It was actually the second flag, or the third one\u0026hellip; I think there was a little issue with the numbering on that one.\nFlag submission:\nPortobello 53 - Bargaining (3/3) | 2 | Losing this private key is not looking great (2/3) I didn\u0026rsquo;t go check the forums before finding the next flag, but there was a new message hinting us on how to do the last one.\nForum message:\nOur AI appliance was supposed to catch anything malicious and yet it let the private key to our wallet get leaked. This is bad for the company. Can you also tell me which CVE was used to do priviledge escalation? I want to get ready to blame someone else. Use this format: flag-bargaining_{MD5 hash of the string CVE-XXXX-YYYYYYYYYY} (without the {}). For the first flag, I kept looking into wireshark and ended up around packet 2218 where we can clearly see some data in the hexadecimal reprensentation.\nTaking that packet and the next ones together, we can recreate the flag.\n FLAG-we_have_a_bad_case_of_ophiocordyceps_unilateralis\n Flag submission:\nPortobello 53 - Bargaining (1/3) | 2 | Why is that server returning commands? (1/3) Forum message:\nThe DNS server is definitely sending commands to the host. What could go wrong? For the last flag, we had to find the message on the forum. We can see from other packets that we see a query to get the version of sudo, and an execution of sudo -u#-1 /bin/bash. Looking for that specific version of sudo that we got earlier (1.8.27), lead us to an exploit-db page informing us of the CVE : 2019-14287.\nWe can use md5sum to generate the hash and submit our last flag.\n flag-bargaining_739d80f289f091f1d5faf12cfd25fe83\n Flag submission:\nPortobello 53 - Bargaining (2/3) | 1 | A yes, a good old MITRE ATT@CK T1548. Give us ways to cope on grief. (3/3) Forum message:\nSomeone logged in as myself and managed to escalate their priviledges. Don‚Äôt tell the news. "},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/the-flag-is-a-secret/","title":"The Flag Is A Secret","tags":[],"description":"","content":"Challenge statement:\nDylan got his hands on some sensitive source code. Watch his video above to find out why he needs your help... üîóhttps://security.love/nsctfmc/hello.txt After downloading the hello.txt file, we can see that it\u0026rsquo;s a base64 blob.\nWe can convert it using cat hello.txt | base64 -d \u0026gt; hello.file.\nThen we can use the file utility to get an idea of what it is.\n$ file hello.file hello.file: Zip archive data, at least v1.0 to extract $ unzip hello.zip Archive: hello.file  creating: repo/  creating: repo/.git/  inflating: repo/.git/config  creating: repo/.git/objects/  creating: repo/.git/objects/pack/  inflating: repo/.git/objects/pack/pack-eaff52f56b425e5b5ac21716b9d9fdb56e6b2c7a.pack  creating: repo/.git/objects/info/  extracting: repo/.git/objects/info/packs  extracting: repo/.git/HEAD  creating: repo/.git/info/  inflating: repo/.git/info/exclude  inflating: repo/.git/info/refs  creating: repo/.git/logs/  inflating: repo/.git/logs/HEAD  creating: repo/.git/logs/refs/  creating: repo/.git/logs/refs/heads/  inflating: repo/.git/logs/refs/heads/master  inflating: repo/.git/description  creating: repo/.git/hooks/  inflating: repo/.git/hooks/commit-msg.sample  inflating: repo/.git/hooks/pre-rebase.sample  inflating: repo/.git/hooks/pre-commit.sample  inflating: repo/.git/hooks/applypatch-msg.sample  inflating: repo/.git/hooks/fsmonitor-watchman.sample  inflating: repo/.git/hooks/pre-receive.sample  inflating: repo/.git/hooks/prepare-commit-msg.sample  inflating: repo/.git/hooks/post-update.sample  inflating: repo/.git/hooks/pre-applypatch.sample  inflating: repo/.git/hooks/pre-push.sample  inflating: repo/.git/hooks/update.sample  creating: repo/.git/refs/  creating: repo/.git/refs/heads/  creating: repo/.git/refs/tags/  extracting: repo/.git/index  inflating: repo/.git/packed-refs  extracting: repo/.git/COMMIT_EDITMSG We can see the packed object that is not usually in a clean repository. The repository is also not reacting normally :\n$ git log fatal: bad object HEAD $ cat objects/pack/pack-eaff52f56b425e5b5ac21716b9d9fdb56e6b2c7a.pack | git unpack-objects Unpacking objects: 100% (11/11), 981 bytes | 981.00 KiB/s, done. objects ‚îú‚îÄ‚îÄ 13 ‚îÇ¬†‚îî‚îÄ‚îÄ 371d7a0caf60d080d2f9196785694736cb926c ‚îú‚îÄ‚îÄ 29 ‚îÇ¬†‚îî‚îÄ‚îÄ 4b2a22f4beaaf42446c64f50d46e023e420164 ‚îú‚îÄ‚îÄ 2b ‚îÇ¬†‚îî‚îÄ‚îÄ 1ab12f55009cd98c2250e3e1dbe8777644b740 ‚îú‚îÄ‚îÄ 2c ‚îÇ¬†‚îî‚îÄ‚îÄ cd75ee92dddff522871ce4ebedd02aed08ba97 ‚îú‚îÄ‚îÄ 3c ‚îÇ¬†‚îî‚îÄ‚îÄ a4066edd31c5d9b8e6857073685e0cbd6680cd ‚îú‚îÄ‚îÄ 41 ‚îÇ¬†‚îî‚îÄ‚îÄ f7e66043fabb8280cb8fc13df101b080364ad2 ‚îú‚îÄ‚îÄ 48 ‚îÇ¬†‚îî‚îÄ‚îÄ bda2b5df64b379731f0e78f4aca7c5e132b716 ‚îú‚îÄ‚îÄ 4b ‚îÇ¬†‚îî‚îÄ‚îÄ 825dc642cb6eb9a060e54bf8d69288fbee4904 ‚îú‚îÄ‚îÄ 79 ‚îÇ¬†‚îî‚îÄ‚îÄ 1c0676fa6f9767ed44d0300973ab51bb9dd668 ‚îú‚îÄ‚îÄ 8e ‚îÇ¬†‚îî‚îÄ‚îÄ f2fc432808c80ae5e95cd485e2de858c69a839 ‚îî‚îÄ‚îÄ a8 ‚îî‚îÄ‚îÄ fe3389a1d422e1c621b52b67b7aefabe862dd5 Simply using the following could give us the full file, but we got lucky since we did not have to compute diffs between commits :\n$ cat pack/pack-eaff52f56b425e5b5ac21716b9d9fdb56e6b2c7a.pack | git cat-file --batch --batch-all-objects [...] 2ccd75ee92dddff522871ce4ebedd02aed08ba97 blob 16 No flag here... 3ca4066edd31c5d9b8e6857073685e0cbd6680cd blob 151 [default] aws_access_key_id = AKIAYVP4CIPPPFRDPNGX aws_secret_access_key = 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 output = json region = us-east-2 41f7e66043fabb8280cb8fc13df101b080364ad2 blob 46 hey, this is the flag file, where\u0026#39;s the flag? [...] Once we called git unpack-objects, the repository became functional and allows us to checkout the different commits or do git diffs to see the different modifications. The file was not modified over time, so the git cat-file was sufficient to give us the aws configuration.\n[default] aws_access_key_id = AKIAYVP4CIPPPFRDPNGX aws_secret_access_key = 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 output = json region = us-east-2 curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install $ AWS_CONFIG_FILE=aws.config aws sts get-caller-identity {  \u0026#34;UserId\u0026#34;: \u0026#34;AIDAYVP4CIPPFFVW4CXJG\u0026#34;,  \u0026#34;Account\u0026#34;: \u0026#34;595918472158\u0026#34;,  \u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:iam::595918472158:user/canarytokens.com@@efklxdafbz2t6lcpp66bj8c61\u0026#34; } $ AWS_CONFIG_FILE=aws.config aws s3 ls  An error occurred (AccessDenied) when calling the ListBuckets operation: Access Denied https://www.filestash.app/s3-browser.html\nAfter more than one hour of trying to use multiple tools to figure out which access we have using those credentials, I gave up and sent in the secret access key \u0026ldquo;qa26OSZwBYzHzeOOQZHTYZaNPOzcGT9EnZUoq44c\u0026rdquo;. That was the flag.\nIf the challenge went ahead with the AWS credentials, instead of being a honeytoken, we could use the Pacu tool to learn more about our permissions.\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022/portobello-anger/","title":"Portobello - Anger","tags":[],"description":"","content":"Challenge statement:\nYOU HAVE NO RIGHTS TO USE THE DNS PROTOCOL MALICIOUSLY. Respect the RFCs spirit like any good technology user would. Our vendor guaranteed us that nothing could get stolen from the Mycoverse and I still believe him. Because any data leaving or entering the Mycoverse goes through our AI-backed deep packet inspection appliance, we have never had any user misuse our technologies. They have no need to do so because anything a user would want is acquireable through our online store. My AI appliance alerted me numerous time about large DNS responses from a single domain name but I deleted these alerts as false positives. I don‚Äôt want to sound like a broken record but we both know that DNS is a benign protocol. You can still try to find the traffic, I bet it is still happening. Rosie Meyer - A+, Server+, CCNA, CCNP, CCIE, MSDST, CSM Network Admin We still need to download the same pcap.\nThe large DNS responses that the challenge statement is talking about can be found in the TXT records. We can see a lot of query and responses for TXT records in the why-pay-for-bits-when-you-can-drop-the-beats.ctf.\nTaking the first one, we can see that the content of the TXT response look like a base64 blob.\nWe can use base64 to get some clear-ish text:\necho \u0026#34;SUQzAwAAAAABFFRQRTEAAAAQAAAAUzNSTCBmdCBLcnlzdGFsVElUMgAAABYAAABUcmlwcGluZyBvbiBNdXNocm9vbXNDT01NAAAAIwAAAAAAAABmbGFnLXJhZGlvLW15Y292ZXJzZS1pcy1hLXNjYW1DT01NAAAAIwAAAFhYWABmbGFnLXJhZGlvLW15Y292ZXJzZS1pcy1hLXNjYW3/+5REAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#34; | base64 -d ID3TPE1S3RL ft KrystalTIT2Tripping on MushroomsCOMM#flag-radio-mycoverse-is-a-scamCOMM#XXXflag-radio-mycoverse-is-a-scamÔøΩÔøΩÔøΩD We can see the first flag in there.\n flag-radio-mycoverse-is-a-scam\n Flag submission:\nPortobello 53 - Anger (1/2) | 1 | This user did not buy this art on the Mycoverse (1/2) Forum message:\nWhat is that user downloading illegaly from a non-official server? We can see that the previous blob was binary, and started with ID3. We can have a better look at it by sending it to hexdump -C:\nID3 is a metadata container usually used in MP3. We can try to extract all the TXT record and create a single file out of them with this script:\nfrom scapy.all import * import base64  raw = sniff(offline=\u0026#34;portobello53.pcapng\u0026#34;)  data = b\u0026#39;\u0026#39;  for packet in raw:  if packet[IPv6].src == \u0026#39;fd00:6e73:6563:3232::100\u0026#39; and b\u0026#39;why-pay-for-bits-when-you-can-drop-the-beats\u0026#39; in packet[DNS].qd.qname and packet[DNS].ancount \u0026gt; 0:  data = data + packet[DNS].an.rdata[0]  with open(\u0026#39;output\u0026#39;, \u0026#39;wb\u0026#39;) as f:  f.write(base64.b64decode(data)) We can now use the file command to make sure what type of file it is:\n$ file output output: Audio file with ID3 version 2.3.0, contains:MPEG ADTS, layer III, v1, 128 kbps, 48 kHz, JntStereo It\u0026rsquo;s a bit hard to hear correctly, but when opening the file in an audio player, we can hear the last flag (SOUND WARNING).\n flag-radiocashmoneymushroom247\n Flag submission:\nPortobello 53 - Anger (2/2) | 2 | When the beat drops, expect the stocks to do the same. This gives me grief. (2/2) Forum message:\nListening to pirated radio channel from within the Mycoverse. I will let Eva and Anatoli know that we are missing out on profit. "},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/toque-tracking/","title":"Toque Tracking","tags":[],"description":"","content":"Challenge statement:\nThe Toqu√© Restaurant Team is beside themselves... someone appears to have highjacked the restaurant\u0026#39;s Google account along with their website analytics. Google has asked them to provide their Google Tag Manager number along with an affidavit to recover the account, but they have no idea what that is, or how to find it. Do you think your team can leap to their aid? Quebec\u0026#39;s gastronomy may just depend on it! Warning‚ö†Ô∏è : This is a drill with a live, operational environment. Only passive reconnaissance is allowed. No active scanning or brute-forcing shall be used. All legal consequences of breaking this rule are the responsibility of those conducting it. Determine the Restaurant\u0026#39;s Google Tag Manager number and provide it in your flag submission for this challenge. Enter only the part of the google tag manager number that follows the \u0026#34;GTM-\u0026#34;. Searching for Toqu√© Restaurant on Google, we can find the website of the restaurant: https://www.restaurant-toque.com/en.\nLooking at the page source, we can find the two following snippet containing the letters GTM:\n[...]  // gtm code snippet  (function (w, d, s, l, i) {  w[l] = w[l] || []; w[l].push({  \u0026#39;gtm.start\u0026#39;:  new Date().getTime(), event: \u0026#39;gtm.js\u0026#39;  }); var f = d.getElementsByTagName(s)[0],  j = d.createElement(s), dl = l != \u0026#39;dataLayer\u0026#39; ? \u0026#39;\u0026amp;l=\u0026#39; + l : \u0026#39;\u0026#39;; j.async = true; j.src =  \u0026#39;https://www.googletagmanager.com/gtm.js?id=\u0026#39; + i + dl; f.parentNode.insertBefore(j, f);  })(window, document, \u0026#39;script\u0026#39;, \u0026#39;dataLayer\u0026#39;, \u0026#39;GTM-KVM6BMM\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;!-- End Google Tag Manager --\u0026gt; \u0026lt;title\u0026gt;A leader of Quebec gastronomy - Restaurant Toqu√©\u0026lt;/title\u0026gt; \u0026lt;script\u0026gt;dl = []; (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({\u0026#39;gtm.start\u0026#39;: new Date().getTime(),event:\u0026#39;gtm.js\u0026#39;});var f=d.getElementsByTagName(s)[0], j=d.createElement(s),dl=l!=\u0026#39;dataLayer\u0026#39;?\u0026#39;\u0026amp;l=\u0026#39;+l:\u0026#39;\u0026#39;;j.async=true;j.src= \u0026#39;//www.googletagmanager.com/gtm.js?id=\u0026#39;+i+dl;f.parentNode.insertBefore(j,f); })(window,document,\u0026#39;script\u0026#39;,\u0026#39;dl\u0026#39;,\u0026#39;GTM-5J9R53Z\u0026#39;); \u0026lt;/script\u0026gt; [...] [...] \u0026lt;body data-site=\u0026#34;toque\u0026#34; data-handle=\u0026#34;toque_homepage\u0026#34;\u0026gt;\u0026lt;noscript\u0026gt;\u0026lt;iframe src=\u0026#34;//www.googletagmanager.com/ns.html?id=GTM-5J9R53Z\u0026#34; height=\u0026#34;0\u0026#34; width=\u0026#34;0\u0026#34; style=\u0026#34;display:none;visibility:hidden\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;/noscript\u0026gt; \u0026lt;noscript\u0026gt;\u0026lt;img height=\u0026#34;1\u0026#34; width=\u0026#34;1\u0026#34; style=\u0026#34;display:none\u0026#34; src=\u0026#34;//www.facebook.com/tr?id=2641458616125750\u0026amp;ev=PageView\u0026amp;noscript=1\u0026#34; /\u0026gt;\u0026lt;/noscript\u0026gt;   \u0026lt;!-- Google Tag Manager (noscript) --\u0026gt; \u0026lt;noscript\u0026gt;  \u0026lt;iframe src=\u0026#34;https://www.googletagmanager.com/ns.html?id=GTM-KVM6BMM\u0026#34; height=\u0026#34;0\u0026#34; width=\u0026#34;0\u0026#34; style=\u0026#34;display:none;visibility:hidden\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/noscript\u0026gt; [...] In both of these snippets, we can find two tags. The first one was GTM-KVM6BMM and the second GTM-5J9R53Z. Without a second to lose, we can try the first, and KVM6BMM was the flag.\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/northsec-flag-token/","title":"NorthSec Flag Token","tags":[],"description":"","content":"Challenge statement:\nJon is lost in the metaverse, and wants to get his hands on a sweet sweet NFT of this collection (alt link). Can you hack the blockchain to grab one for yourself? RULES DO NOT ATTACK WEBSITES, API OR USERS; DO NOT TRY TO BUY NFTs; ONLY USE PLAIN RINKEBY TESTNET BLOCKCHAIN INTERACTIONS! Send me an Ethereum personal signature of \u0026#34;NFT stands for NorthSec Flag Token\u0026#34; (without quotes) from the wallet owning the NFT. Do not leak your signature as it can be used by anyone to solve the challenge. You can use https://app.mycrypto.com/sign-message or any other tools to create the signature which is a string that starts with 0x. The collection can be seen here or here\nThe first step is to have access to an Eth wallet. The easiest way is to install MetaMask in your browser.\nThe second step is to get a bit of Eth to be able to generate transactions. We need to get some on faucets like https://faucets.chain.link/rinkeby.\nBy browsing the collection, we can see that a few token were owned by 0xc745a32262b944ABd01a119598BBB6e7654779a3 and 0x836A3cBEB8a962707a9387Db5C80bA9508a04Dc5. I had at first not seen, but the last NFT was owned by 0x0b055ded5fc8c8b107fcFD8f22B76E1C5D59490F.\nWe can scour the list of transactions done by that first address on etherscan. Most of the challenge was doable by using the etherscan website and looking at the Transactions and Contract tabs.\nThis transaction is the creation of the contract for the challenge\u0026rsquo;s NFT marketplace.\nWe can then go check the contract located at this address which will probably have a lot of failed transactions by the time that you read this writeup. That address could also be found directly on the collection page, which would have been lightly faster.\nWe can see the first three NFT being minted directly on the marketplace, but that turned out to be a dead end.\nLooking at the marketplace contract, we could also see two interesting transactions, one for Approve Admin and one for Revoke Admin. Those two specify the address 0x836a3cbeb8a962707a9387db5c80ba9508a04dc5. Looking at that address\u0026rsquo; transactions, we can see the creation of two Giveaway contracts, with the first one\u0026rsquo;s giveaway function called twice, which created the NFT 4 and 5.\nGoing on the Givaway contract which created those NFT, we can call the giveaway function the same way and generate a new NFT that would be given to our address. The source address needed to be the marketplace, and the target our own address.\nOn the Contract tab, we can see the actual code behind the giveaway function:\n/** * @title GiveAway NSEC2022 WARMUP * @dev Give away NFTs! */ contract GiveAway is CreatorExtensionBasic {   constructor() {}   /** * @dev This public function is used to give away NFT! * @param source The source contract address to mint the NFT from * @param target The target wallet address to receive the minted NFT */  function giveaway(address source, address target) public {  IERC721CreatorCore(source).mintExtension(target);  } } The same function can be found at the bottom of the second Giveaway contract.\nFrom the marketplace, it was also possible to find the last original NFT owner\u0026rsquo;s address in this transaction which interacts with the first Giveaway contract to invoke the giveaway function the same way, to create the sixth NFT.\nIf we keep looking at the transactions made by the marketplace creator, we can find one calling registerExtension that is specifying the address of that first Giveaway contract. The second parameter, the baseURI, doesn\u0026rsquo;t related to https://studio.api.manifoldxyz.dev/asset_uploader/asset/2852698318/metadata/full which contains metadata for the tokens.\nAfter receiving the NFT, we had to sign a message and send it to the flag validator. The signature was done using MyCrypto, which generated a sig in the proper format.\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/vlc-of-the-mariner/","title":"VLC of the Mariner","tags":[],"description":"","content":"Challenge statement:\nA long long time ago, a ship was driven by storms to the cold country towards the South Pole. From there, strange things happened and the men of the ship were never seen again. What happened to these people? To find out, solve the mystery of the VLC mariner. https://drive.google.com/file/d/1hIH2AWn_9ng7eKXnQPNZgrBeGj7ZyejZ/view?usp=sharing\nDownloading and extracting that zip file shows us the source code for VLC. My first approach is to try to find the version and download the real source code, in case we can see what is different.\nWe can find the version in the configure file:\n# Guess values for system-dependent variables and create Makefiles. # Generated by GNU Autoconf 2.69 for vlc 3.0.12. # # Copyright 1999-2020 VLC authors and VideoLAN We can now download the real VLC 3.0.12 and compare it with diff -r vlc-3.0.12 vlc-mariner-main.\ndiff -r vlc-3.0.12/bin/vlc.c vlc-mariner-main/bin/vlc.c 111a112,116 \u0026gt; static void look_at_the_main_method() \u0026gt; { \u0026gt; \u0026gt; } \u0026gt; 116a122,125 \u0026gt; /* Is this the flag? Almost but not quite. \u0026gt; * Four times fifty, but their count is 0. \u0026gt; * Divided in their rank, none of them a hero. \u0026gt; * Let‚Äôs leave the riddles here, find a divide by zero. */ diff -r vlc-3.0.12/modules/access/dshow/filter.cpp vlc-mariner-main/modules/access/dshow/filter.cpp 100a101,122 \u0026gt; \u0026gt; int CapturingPin() { \u0026gt; // A cryptic message was sent to the submariner over a secure line: \u0026gt; // \u0026gt; // /--- BEGIN TRANSMISSION----| \u0026gt; // \u0026gt; // Captain, please input the following key in the special tool we referenced in SECURITY \u0026gt; // documents: \u0026gt; // \u0026gt; // cpg.call.name(\u0026#34;malloc\u0026#34;).where(_.ar .....t12ry3tyru@%#$^$ghgjj \u0026gt; // !!!!! TRANSMISSION INTERRUPTED !!!!! \u0026gt; // \u0026gt; // RECONNECTING... \u0026gt; // 3...2...1 \u0026gt; // \u0026gt; // Captain, listen to me! \u0026gt; // Memory allocations with arithmetic operations are dangerous... \u0026gt; // Please find a memory allocation with multiplication in our sinking ship! \u0026gt; \u0026gt; return 0; \u0026gt; } \u0026gt; 227a250,263 \u0026gt; } \u0026gt; \u0026gt; int CapturedPin() { \u0026gt; int zero = 200; \u0026gt; int two_hundred = 0; \u0026gt; if (zero == 0) { \u0026gt; return two_hundred/zero; \u0026gt; } else { \u0026gt; if (zero != 0) { \u0026gt; return zero/two_hundred; \u0026gt; } else { \u0026gt; return CapturingPin(); \u0026gt; } \u0026gt; } diff -r vlc-3.0.12/src/misc/update_crypto.c vlc-mariner-main/src/misc/update_crypto.c 690c690,693 \u0026lt; p_key-\u0026gt;psz_username = (uint8_t*)malloc( i_packet_len + 1); --- \u0026gt; int HERE_LIE_THE_200 = 1 \u0026gt; // |[] SUBMIT: |[] \u0026gt; // | I shot the albatross | \u0026gt; p_key-\u0026gt;psz_username = (uint8_t*)malloc( i_packet_len * HERE_LIE_THE_200_MEN); diff -r vlc-3.0.12/src/network/httpd.c vlc-mariner-main/src/network/httpd.c 31a32 \u0026gt; #include \u0026#34;networking.h\u0026#34; 254a256,266 \u0026gt; } \u0026gt; \u0026gt; void begin_quote (char **body, int code, const char *url) \u0026gt; { \u0026gt; const char *errname = httpd_ReasonFromCode (code); \u0026gt; assert (errname); \u0026gt; int res = 1; \u0026gt; if (res == -1) { \u0026gt; *body = NULL; \u0026gt; i(code); \u0026gt; } diff -r vlc-3.0.12/src/network/io.c vlc-mariner-main/src/network/io.c 50a51 \u0026gt; #include \u0026#34;networking.h\u0026#34; 104a106,130 \u0026gt; void end_quote (int code) \u0026gt; { \u0026gt; int üö©; \u0026gt; int have_no_meaning = 1; \u0026gt; üö© = have_no_meaning; \u0026gt; } \u0026gt; \u0026gt; void albatross (int code) \u0026gt; { \u0026gt; int ation = code; \u0026gt; struct addrinfo hints = { \u0026gt; .ai_socktype = type, \u0026gt; .ai_protocol = protocol, \u0026gt; .ai_flags = AI_PASSIVE | AI_NUMERICSERV | AI_IDN, \u0026gt; }, *res; \u0026gt; \u0026gt; msg_Dbg (p_this, \u0026#34;net: listening to %s port %d\u0026#34;, \u0026gt; (psz_host != NULL) ? psz_host : \u0026#34;*\u0026#34;, i_port); \u0026gt; \u0026gt; int i_val = vlc_getaddrinfo (psz_host, i_port, \u0026amp;hints, \u0026amp;res); \u0026gt; if (i_val) \u0026gt; { \u0026gt; end_quote(ation); \u0026gt; } \u0026gt; } diff -r vlc-3.0.12/src/network/rootbind.c vlc-mariner-main/src/network/rootbind.c 35a36 \u0026gt; #include \u0026#34;networking.h\u0026#34; 183a185,197 \u0026gt; } \u0026gt; \u0026gt; void the (int code) \u0026gt; { \u0026gt; int pew = code; \u0026gt; static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; \u0026gt; struct sockaddr_storage ss; \u0026gt; int fd, sock = -1; \u0026gt; \u0026gt; const char *sockenv = getenv (\u0026#34;VLC_ROOTWRAP_SOCK\u0026#34;); \u0026gt; if (sockenv != NULL) \u0026gt; sock = atoi (sockenv); \u0026gt; albatross(pew * 2); diff -r vlc-3.0.12/src/network/tcp.c vlc-mariner-main/src/network/tcp.c 33a34 \u0026gt; #include \u0026#34;networking.h\u0026#34; 260a262,278 \u0026gt; void shot (int code) \u0026gt; { \u0026gt; int thing = code; \u0026gt; int *pi_fd; \u0026gt; unsigned n = 0; \u0026gt; while (pi_fd[n] != -1) \u0026gt; n++; \u0026gt; \u0026gt; struct pollfd ufd[n]; \u0026gt; /* Initialize file descriptor set */ \u0026gt; for (unsigned i = 0; i \u0026lt; n; i++) \u0026gt; { \u0026gt; ufd[i].fd = pi_fd[i]; \u0026gt; ufd[i].events = POLLIN; \u0026gt; } \u0026gt; the(thing); \u0026gt; } diff -r vlc-3.0.12/src/network/udp.c vlc-mariner-main/src/network/udp.c 39a40 \u0026gt; #include \u0026#34;networking.h\u0026#34; 202a204,210 \u0026gt; void i( int code ) \u0026gt; { \u0026gt; int gun = code; \u0026gt; char *ifname = var_InheritString (obj, \u0026#34;miface\u0026#34;); \u0026gt; if (ifname == NULL) \u0026gt; shot(gun); \u0026gt; } diff -r vlc-3.0.12/src/video_output/display.c vlc-mariner-main/src/video_output/display.c 536c536 \u0026lt; msg_Dbg(vd, \u0026#34;VoutDisplayEvent \u0026#39;double click\u0026#39;\u0026#34;); --- \u0026gt; msg_Dbg(vd, \u0026#34;Look at the main method ‚öì\u0026#34;); There is also two interesting files. One is src/network/networking.h which contains the following:\nvoid begin_quote (char, int, const char*); void i(int); void shot(int); void the(int); void albatross(int); void end_quote(int); (Spoiler, that is the flag)\nAnd the second is refered to in the mariner version of filter.cpp: security.txt\nStatic (adj.) Lacking in movement, action, or change, especially in a way viewed as undesirable or uninteresting. You‚Äôve probably reviewed your own code at some point in your life. Performing a source code review is one of the best ways to find security issues in applications. Looking at source code to identify vulnerabilities without running the program is also called \u0026#34;static code analysis\u0026#34;. There are many ways you can start reviewing your code for security bugs. But in general, it‚Äôs good to start by learning what the most common vulnerabilities and security pitfalls are for the type of application you are building. Then, get familiar with the indicators and signatures of those vulnerabilities so that you can identify similar patterns in source code. As an example, the signature for an XXE vulnerability is passing user-supplied XML to a parser without disabling DTDs or external entities. During a code review session, you typically look for bad security patterns, universal issues like input validation and injection issues, and low-level coding flaws like arithmetic issues and memory access bugs. You can also search for strings, keywords, and code patterns known to be indicators for vulnerabilities or misconfiguration: hardcoded API keys, encryption keys, and database passwords, outdated dependencies versions, methods known to be unsafe, etc. For more information about conducting code reviews, visit this guide: https://owasp.org/www-pdf-archive/OWASP_Code_Review_Guide_v2.pdf. Automated static code analysis techniques are often driven by compiler technologies. One of these methods is data-flow analysis. Data flow analysis studies how data propagate in a program. For instance, you can track sensitive information or user-controlled input and how they interact with parts of the program. Think of data as water: flowing from the source of the water (the tap) to the sink. A \u0026#34;source\u0026#34; is the code that allows a vulnerability to happen, whereas a \u0026#34;sink\u0026#34; is where the vulnerability actually happens. Take command injection vulnerabilities, for example. A \u0026#34;source\u0026#34; in this case could be a function that takes in user input. Whereas the \u0026#34;sink\u0026#34; would be functions that execute system commands. If the untrusted user input can get from \u0026#34;source\u0026#34; to \u0026#34;sink\u0026#34; without proper sanitization or validation, there is a command injection vulnerability. Many common vulnerabilities can be identified by tracking this \u0026#34;data flow\u0026#34; from appropriate sources to corresponding sinks. The ancient mariners have long told a tale, of a tool named Joern that can hunt down code quality issues made from hell. Remember this phrase as you near the end of the game, these queries sometimes look like a chain. But first, to learn the craft of the ancient mariner, you must first find a string with an anchor ‚öì. As you can probably tell, this process is super dependent on the programming language in use, etc. On the other hand, dynamic analyses tools act more like robo pentesters. They paste \u0026#34;\u0026lt;script\u0026gt;alert()\u0026lt;/script\u0026gt;\u0026#34; into form fields is what I‚Äôve heard. So if we put the pieces back together, it\u0026rsquo;s a static code analysis challenge. Looking at the Joern tool online, and googling with the part of the query that is given to us, we can find the full query to be the following: cpg.call(\u0026quot;malloc\u0026quot;).where(_.argument(1).arithmetics), which confirms the suspicious message Memory allocations with arithmetic operations are dangerous... Please find a memory allocation with multiplication in our sinking ship!. We can find one such occurence in update_crypto.c where the code was changed to p_key-\u0026gt;psz_username = (uint8_t*)malloc( i_packet_len * HERE_LIE_THE_200_MEN);. Right above it was a comment saying: SUBMIT: I shot the albatross, which was the flag. Therefore, all functions chaining together, starting with begin_quote() going to i(), shot(), the(), albatross() and ending with end_quote() was another way to find the flag.\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/whamazon/","title":"Whamazon","tags":[],"description":"","content":"Challenge statement:\nWelcome to Whamazon(http://54.159.198.36:3000/)! Buy anything you would like... but I doubt you have enough money to purchase the flag! Once we open the link, we get welcombed by a terminal-like interface that announce the goods of Whamazon:\nWe have a few choices. We can start by taking a look at our inventory:\nWe can move on pretty fast as we have nothing. We can then try to buy something, and see that we have 50$.\nWe see the flag being offered, so let\u0026rsquo;s try to buy it.\nNow that we know it\u0026rsquo;s that expensive, there are multiple ways to approach this problem. We can start by either increasing our wallet, or decreasing the price of the flag. What if we tried to buy an apple. What if we tried to buy a negative amount of apples?\nSince we bought a negative amount of apple, the simple maths were done and we got money back in our wallet. Now we can try to buy the flag.\nOk, second step of the challenge. Since this is a warmup challenge, this is only a logical question and if we believe the opponent, they will not chose paper. If they chose between Rock and Scissors, we know that we can\u0026rsquo;t lose picking Rock.\nNow that they chose Scissors, we got the flag. Looking at our inventory, we can now see it in clear: nsec2022{wh4m_b4m_subtr4ct_a_n3g4t1v3_numb3r_f4m}.\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/warmup-flag-actual/","title":"warmup flag (actual)","tags":[],"description":"","content":"Challenge statement:\nHere\u0026#39;s a flag for you. Can you flag the flag? https://drive.google.com/file/d/1EJrd_iDuY9xtyMmv6L9vdjbDM8K-t5RR/view?usp=sharing\nWe get a base64 blob, so first step first, we can recreate the real file with\ncat actualflag.txt | base64 -d \u0026gt; actualflag.bin We can use the file command to get a guess of what we have at hand\n$ file actualflag.bin actualflag.bin: PNG image data, 149 x 247, 8-bit/color RGBA, non-interlaced Using exiftool, we could check what the metadata of that PNG file is, which may give us an hint.\n$ exiftool actualflag.bin ExifTool Version Number : 11.88 File Name : actualflag.bin Directory : . File Size : 3.3 kB [...] File Permissions : rw-rw-r-- File Type : PNG File Type Extension : png MIME Type : image/png Image Width : 149 Image Height : 247 Bit Depth : 8 Color Type : RGB with Alpha Compression : Deflate/Inflate Filter : Adaptive Interlace : Noninterlaced SRGB Rendering : Perceptual Gamma : 2.2 Pixels Per Unit X : 3780 Pixels Per Unit Y : 3780 Pixel Units : meters Creation Time : 2022:02:22 22:52:50 Warning : [minor] Trailer data after PNG IEND chunk Image Size : 149x247 Megapixels : 0.037 We can see one Warning toward the end, which says that we have trailing data. We can then use hexdump -C to check what that data look like.\n$ hexdump -C actualflag.bin | tail 00000cc0 c4 73 93 eb ce 5a 4f b2 bc d2 a8 2c 6d 7b 56 79 |.s...ZO....,m{Vy| 00000cd0 82 be 57 72 04 57 af 96 c3 f3 75 59 1c 19 a7 64 |..Wr.W....uY...d| 00000ce0 6e 5b 42 72 9d 4d a3 c9 e4 a8 b0 83 6d eb e8 f3 |n[Br.M......m...| 00000cf0 26 cb ed ad db 97 b7 fa 58 2b f1 9b a7 72 60 9d |\u0026amp;.......X+...r`.| 00000d00 c6 d7 76 cf e4 6e c3 51 2c be a3 bf 2e 59 b5 3b |..v..n.Q,....Y.;| 00000d10 39 d2 ae 5f 85 a2 2b 54 4d 85 fe 50 a8 9a 0a fd |9.._..+TM..P....| 00000d20 40 e4 ff 81 d2 f3 0d c2 e2 e5 de 00 00 00 00 49 |@..............I| 00000d30 45 4e 44 ae 42 60 82 42 32 32 39 2d 30 30 31 35 |END.B`.B229-0015| 00000d40 35 64 34 38 30 34 30 62 7d |5d48040b}| 00000d49 Those last bytes looks like the ending of a flag, so we need to find the start of it.\nI tried to upload the PNG file to an online metadata viewer, and one thing it gave me is actually to show me the picture itself.\nI guess that was it! The full flag was FLAG-{1a91dd46-945d-11ec-B229-00155d48040b}.\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/hidden-harware-secrets/","title":"Hidden Hardware Secrets","tags":[],"description":"","content":"Challenge statement:\nWe were sneaking around NorthSec before it started and found a hardware device. Taking apart the device, we found a serial interface and sniffed some data with our Saleae logic analyzer. Can you help us decode what we captured? Another logic analyzer challenge, so we can start by downloading the hw_hacking.sal file. I tried to open the file in Pulseview Sigrok like I did for warmup challenge, logically, but got a generic/unspecified error.\nSearching online what I could do with a .sal file, I ended up on this other CTF writeup which probably gave me a bit more than what I was supposed to get.\nWe can start by downloading the Logic2 application and open an existing capture.\nWe can see a few exchanges, and zooming on the first one, we can find the smallest period of the signal.\nDoing the same maths, we can calculate a rate of 125,000 bits/second. Using the same list of standard baud rates, we will find the same nearest rate of 115,200.\nWe can now set an Analyzer, of type Async Serial, with that specific bit rate.\nWe can also change the output type from hexadecimal to ascii.\nOnce that is done, we can take a look at the first message.\nThat is good, we can see the messages clearly. Either we change the current Analyzer to look at the other channel, or we add a new analyzer for the other channel. In reality I just peek toward the end and as you will see, moved backward to see where I went wrong.\nThe conversation went as following:\nThe next message, as I saw it, without the transformation to the new 38400 baud, was as following.\nOnce we change the Analyzer to the right bit bit rate, we got the following:\nAnd we now have the flag: nsec2022{yoU_know_the_ART}\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/fuzzforfun/","title":"FuzzForFun","tags":[],"description":"","content":"Challenge statement:\nFuzz the parser and find the bug! The goal is to find a reproducible bug in the ESIF parser. We\u0026#39;re looking for an exploitable vulnerability. \u0026#34;Theoretical bugs\u0026#34; or code warnings are not welcome, sorry. After downloading the zip file, we could read the content of the HOWTO, which gives a very big help on where to start:\n1) The goal is to find a reproducible bug on the ESIF parser. We\u0026#39;re looking for an exploitable vulnerability. \u0026#34;Theoretical bugs\u0026#34; or code warnings are not welcome, sorry. 2) The challenge is intended to be solved by fuzzing, but creative approaches will be encouraged. 3) You can build the parser with: gcc Source.c -o Source -lcrypto -lssl -lm -w 4) Then you can parse the example file with the following command: ./Source example.ESIF output 5) I recommend you to use AFL++, but you can use whatever other fuzzer you want. 6) Once you have a crash file, you can get the flag with the following command: ./Check \u0026lt;CrashFile\u0026gt; 7) Enjoy! TIP: Take a look at https://github.com/antonio-morales/Fuzzing101 Based on Exercise 1, we can install afl++.\nWe can create an \u0026ldquo;examples\u0026rdquo; and \u0026ldquo;outputs\u0026rdquo; folder, and put the example.ESIF into the examples folder.\nsudo apt-get install -y build-essential python3-dev automake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools sudo apt-get install -y lld-11 llvm-11 llvm-11-dev clang-11 || sudo apt-get install -y lld llvm llvm-dev clang sudo apt-get install -y gcc-$(gcc --version|head -n1|sed \u0026#39;s/.* //\u0026#39;|sed \u0026#39;s/\\..*//\u0026#39;)-plugin-dev libstdc++-$(gcc --version|head -n1|sed \u0026#39;s/.* //\u0026#39;|sed \u0026#39;s/\\..*//\u0026#39;)-dev  cd $HOME git clone https://github.com/AFLplusplus/AFLplusplus \u0026amp;\u0026amp; cd AFLplusplus export LLVM_CONFIG=\u0026#34;llvm-config-11\u0026#34; make distrib sudo make install During the installation, you need to make sure that you fix whatever problem that comes up during those steps. I was missing cmake and gcc-X-plugin-dev, which in my case was gcc-9-plugin-dev.\nWe can then compile our executable with the AFL instrumentation and start the fuzzer with the following:\nexport LLVM_CONFIG=\u0026#34;llvm-config-11\u0026#34; CC=$HOME/AFLplusplus/afl-clang-fast CXX=$HOME/AFLplusplus/afl-clang-fast++ $HOME/AFLplusplus/afl-gcc-fast Source.c -o Source -lcrypto -lssl -lm -w /usr/local/bin/afl-fuzz -i examples -o outputs -s 123 -- ./Source @@ outputs/output Now it\u0026rsquo;s time to wait. While waiting, I also tried to run it in a docker container, to see if the speed would be better than a VM, but it was not. For references, here are the steps to make it work in a docker container:\ndocker run -ti -v \u0026#34;$(pwd):/home\u0026#34; aflplusplus/aflplusplus export HOME=\u0026#34;/home\u0026#34; afl-gcc Source.c -o Source -lcrypto -lssl -lm -w afl-fuzz -i examples/ -o outputs/ -s 123 -- ./Source @@ outputs/output At some point I tried to enable bit/byte flips and such by using the -D switch.\nAFL_AUTORESUME=1 /usr/local/bin/afl-fuzz -D -i examples -o outputs -s 123 -- ./Source @@ outputs/output After more than an hour, I thought that maybe I had to try a different approach. I looked into trying to give more information on the file structure of the input to AFL, but I wasn\u0026rsquo;t even sure what the program expected, or how to do such thing with AFL.\nI decided to run the check program on the sample output, to see the result, and it gave the following:\n$ ./Check output nsec2022_2665387 Maybe that number is a hint on which seed to use, so I tried to run it with the seed being 2665387. With or without the -D option, it did not do much better.\nI decided to keep reading those exercises, and finally got to Exercise 3. One thing that it brings up is to use afl-clang-lto instead of afl-gcc/afl-gcc-fast to compile the application. I ended up having other issues, and didn\u0026rsquo;t think I was supposed to fix the compilation problems.\nThe other thing that Exercise 3 was doing differently was to build with ASan, the Address Sanitizer, enabled. So I tried\nAFL_USE_ASAN=1 CC=$HOME/AFLplusplus/afl-clang-fast CXX=$HOME/AFLplusplus/afl-clang-fast++ $HOME/AFLplusplus/afl-gcc-fast Source.c -o Source -lcrypto -lssl -lm -w  AFL_AUTORESUME=1 /usr/local/bin/afl-fuzz -i examples -o outputs_123_ASAN -s 123 -- ./Source @@ outputs/output And right away, I got a crash.\nLooking in the outputs_123_ASAN\u0026rsquo;s crashes folder, I could see 1 interesting file. Time to try giving it to the Check utility:\n./Check outputs_123_ASAN/default/crashes/id\\:000000\\,sig\\:06\\,src\\:000000\\,time\\:7398\\,execs\\:4154\\,op\\:havoc\\,rep\\:4 nsec2022_8831357 And we got the last flag of the warmup!\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/montr%C3%A9al-remix/","title":"Montr√©al Remix","tags":[],"description":"","content":"Challenge statement:\nI play this tune every time I\u0026#39;m headed home and land at Montr√©al-Pierre Elliott Trudeau International Airport! It has a special meaning for this year. Can you find it? If you do, we have something special for you at the NSEC shop! (while supplies last) ‚ö†Ô∏è Warning: This remixed version of the song has some really loud parts. Keep your volume low. Flag format: nsec2022{} After downloading the file, we can start with a safe first step: Getting information with exiftool!\nExifTool Version Number : 11.88 File Name : MONTREAL.mp3 Directory : . File Size : 607 kB [...] File Permissions : rw-rw-r-- File Type : MP3 File Type Extension : mp3 MIME Type : audio/mpeg MPEG Audio Version : 2 Audio Layer : 3 Sample Rate : 22050 Channel Mode : Single Channel MS Stereo : Off Intensity Stereo : Off Copyright Flag : False Original Media : True Emphasis : None VBR Frames : 2722 VBR Bytes : 620964 VBR Scale : 80 Encoder : LAME3.100.n. ID3 Size : 203 Title : Montr√©al Year : 1969 Warning : [minor] Frame \u0026#39;TDRC\u0026#39; is not valid for this ID3 version Recording Time : 1969 Album : Dcode \u0026amp; Audacity Genre : Criminoly/Cryptography Track : 408 Artist : Ariane Moffatt ft. The Zodiac Killer, The Hardens Date/Time Original : 1969 Audio Bitrate : 69.9 kbps Duration : 0:01:11 (approx) We can search about the invalid TDRC frame warning, but after installing a few more tools, I gave up on that.\nIt was clear that multiple keys among the last ones had been modified by the challenge creator.\nOpening the file in Audacity, and listening to the song shows us some definitive artifacts.\nI decided that maybe there was a way to get the true song out of Youtube and do some kind of diff between the real song and this song to see what was done to it. I decided to search for the full artist name Ariane Moffatt ft. The Zodiac Killer, The Hardens. Strangely enough, I couldn\u0026rsquo;t find the song right away. It took some tries and changing my search but I finally found the Montreal song. I used a third party website to download it to MP3 and tried to compare the two in Audacity. I couldn\u0026rsquo;t find a good way to import both tracks in Audacity to do the diff, and comparing the two tracks in two different windows was not very promising. Time to start again\u0026hellip;\nI decided to use Audacity\u0026rsquo;s tool to show the track from Waveform to Waveform(DB), and then to Spectrogram, which resulted in the following:\nWe can definitively see a few strange characters in the Spectrogram, so we can delete the parts of the song that was not altered and see a better picture.\nWe can even set the scale to Logarithmic, and configure the Spectrogram\u0026rsquo;s settings to set the minimal frequency to 100Hz.\nAt that point, we were clearly on the right path to get the flag, but the next took a while to figure out. I originally thought those characters were Unicode, and started searching on how it could be translated to something that would look like a flag. I then went down the font rabbit hole, thinking it could be Wingdings or a similar one.\nMaybe I was wrong, and this picture was just a lure to mess with us. I decided to go back to basics, trying with Strings on the file, and look back at the exiftool output.\nAlbum : Dcode \u0026amp; Audacity Genre : Criminoly/Cryptography An interesting typo was made in the word Criminology, so that could be a hint as some kind of cryptography method! Combining the word Criminoly with Cryptography, we can try to find what type of cryptography was used in the challenge. Searching about that, or searching about Criminoly Dcode did not give a lot of good results. Searching for Criminoly on dcode, didn\u0026rsquo;t give anything. After a little while, I gave up again\u0026hellip; maybe it was simply a true typo\u0026hellip; :(\nI finally remembered that the Artist information was wrong!\nArtist : Ariane Moffatt ft. The Zodiac Killer, The Hardens Yeah, who are The Hardens!?\nSo I searched about the Hardens, and found The Harden Trio. What are they about?\n\u0026hellip;\nNothing really came out of that search, what is going on?\nSo I searched for the hardens the zodiac killer, and multiple links came up talking about The Zodiac Ciphers, FBI Says Zodiac Killer Coded Message Has Been Solved and FBI Confirms Zodiac Killer\u0026rsquo;s Infamous 340 Cipher Has Been Decoded, And His Message Finally Revealed. That\u0026rsquo;s very interesting! Here\u0026rsquo;s an example of the encoded characters:\nFinding the Zodiac Killer Cipher tool on dcode, we can search each character one by one and get the final answer:\nAnd the final flag was nsec2022{BACKINPERSON}.\nAfter realizing what the Cipher was, we can go back and see the other oddentries in exiftool:\nYear : 1969 Recording Time : 1969 Track : 408 Date/Time Original : 1969 The Zodiac Ciphers were created in 1969, and we had to use the Z408 variant.\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022-warmup/","title":"NSec 2022 WarmUp","tags":[],"description":"","content":"Challenges were found over Discord. Started on April 5th 2022.\n"},{"uri":"https://n1trate.github.io/writeups/nsec-2022/","title":"NSec 2022","tags":[],"description":"","content":"The NSec CTF was on May 20-21-22, 2022. As with every NSec CTF, there was a theme, and this year\u0026rsquo;s theme is Mushrooms and NFTs.\n"},{"uri":"https://n1trate.github.io/writeups/tools/","title":"Tools","tags":[],"description":"","content":"https://www.cryptool.org/en/cto/\nhttps://www.asciitohex.com/\n"},{"uri":"https://n1trate.github.io/writeups/_footer/","title":"","tags":[],"description":"","content":"Weeeeeeeeeeeeeeee\n"},{"uri":"https://n1trate.github.io/writeups/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://n1trate.github.io/writeups/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://n1trate.github.io/writeups/","title":"Writeups","tags":[],"description":"","content":"Writeups Hello.\nWorld.\n"}]